<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AUTHENTICATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AUTHENTICATION.md" />
              <option name="updatedContent" value="#  Sistema de Autenticação com NextAuth.js v5&#10;&#10;Este projeto implementa autenticação completa usando **NextAuth.js (Auth.js v5)** integrado com o backend existente.&#10;&#10;##  Dependências Instaladas&#10;&#10;```bash&#10;npm install next-auth@beta&#10;```&#10;&#10;## ️ Arquitetura da Solução&#10;&#10;### Estrutura de Arquivos&#10;&#10;```&#10;auth.ts                          # Configuração principal do NextAuth&#10;auth.config.ts                   # Configuração de autorização&#10;src/&#10;  app/&#10;    middleware.ts                # Proteção de rotas&#10;    api/auth/[...nextauth]/      # API routes do NextAuth&#10;      route.ts&#10;  components/&#10;    auth/&#10;      auth-provider.tsx          # SessionProvider wrapper&#10;      login-form.tsx             # Formulário de login&#10;      signup-form.tsx            # Formulário de cadastro&#10;  lib/&#10;    actions/&#10;      auth.ts                    # Server Actions (signup)&#10;    hooks/&#10;      use-access-token.ts        # Hook customizado para token&#10;  types/&#10;    next-auth.d.ts              # Tipos TypeScript customizados&#10;```&#10;&#10;##  Configuração&#10;&#10;### 1. Variáveis de Ambiente&#10;&#10;Crie um arquivo `.env.local` com as seguintes variáveis:&#10;&#10;```env&#10;# NextAuth.js&#10;NEXTAUTH_SECRET=your-secret-key-here  # Gere com: openssl rand -base64 32&#10;NEXTAUTH_URL=http://localhost:3000&#10;&#10;# API Backend&#10;NEXT_PUBLIC_API_BASE_URL=http://localhost:3333&#10;```&#10;&#10;### 2. Fluxo de Autenticação&#10;&#10;####  Login (NextAuth Credentials)&#10;&#10;```typescript&#10;// Client Component&#10;import { signIn } from &quot;next-auth/react&quot;&#10;&#10;const result = await signIn(&quot;credentials&quot;, {&#10;  email: &quot;user@example.com&quot;,&#10;  password: &quot;password123&quot;,&#10;  redirect: false,&#10;})&#10;&#10;if (result?.error) {&#10;  // Tratar erro&#10;} else {&#10;  // Login bem-sucedido&#10;  router.push(&quot;/dashboard&quot;)&#10;}&#10;```&#10;&#10;**Fluxo interno:**&#10;1. Usuário submete formulário&#10;2. NextAuth valida com Zod (`loginSchema`)&#10;3. Faz `POST /sessions` no backend&#10;4. Recebe `access_token`&#10;5. Armazena token no JWT do NextAuth&#10;6. Cria session com dados do usuário&#10;&#10;####  Signup (Server Action)&#10;&#10;```typescript&#10;// Client Component&#10;import { signupAction } from &quot;@/lib/actions/auth&quot;&#10;&#10;const result = await signupAction({&#10;  name: &quot;John Doe&quot;,&#10;  email: &quot;john@example.com&quot;,&#10;  password: &quot;password123&quot;,&#10;})&#10;&#10;if (result.error) {&#10;  // Tratar erro&#10;} else {&#10;  // Conta criada e login automático feito&#10;  router.push(&quot;/dashboard&quot;)&#10;}&#10;```&#10;&#10;**Fluxo interno:**&#10;1. Server Action valida dados com Zod&#10;2. Faz `POST /users` no backend&#10;3. Após sucesso, usa `signIn()` automaticamente&#10;4. Usuário é redirecionado já autenticado&#10;&#10;####  Logout&#10;&#10;```typescript&#10;import { signOut } from &quot;next-auth/react&quot;&#10;&#10;await signOut({ callbackUrl: &quot;/login&quot; })&#10;```&#10;&#10;##  Como Usar&#10;&#10;### Em Server Components&#10;&#10;```typescript&#10;import { auth } from &quot;@/auth&quot;&#10;import { redirect } from &quot;next/navigation&quot;&#10;&#10;export default async function DashboardPage() {&#10;  const session = await auth()&#10;  &#10;  if (!session) {&#10;    redirect(&quot;/login&quot;)&#10;  }&#10;&#10;  // Acessar dados do usuário&#10;  const userEmail = session.user.email&#10;  const accessToken = session.accessToken&#10;&#10;  return &lt;div&gt;Welcome {userEmail}&lt;/div&gt;&#10;}&#10;```&#10;&#10;### Em Client Components&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { useSession } from &quot;next-auth/react&quot;&#10;&#10;export function ProfileCard() {&#10;  const { data: session, status } = useSession()&#10;&#10;  if (status === &quot;loading&quot;) {&#10;    return &lt;div&gt;Carregando...&lt;/div&gt;&#10;  }&#10;&#10;  if (!session) {&#10;    return &lt;div&gt;Não autenticado&lt;/div&gt;&#10;  }&#10;&#10;  return &lt;div&gt;Email: {session.user.email}&lt;/div&gt;&#10;}&#10;```&#10;&#10;### Fazer Requisições Autenticadas&#10;&#10;#### Usando o Hook `useAccessToken`&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { useAccessToken } from &quot;@/lib/hooks/use-access-token&quot;&#10;&#10;export function MyComponent() {&#10;  const { accessToken, isAuthenticated } = useAccessToken()&#10;&#10;  const fetchData = async () =&gt; {&#10;    const response = await fetch(`${API_URL}/data`, {&#10;      headers: {&#10;        Authorization: `Bearer ${accessToken}`,&#10;      },&#10;    })&#10;    return response.json()&#10;  }&#10;&#10;  // ...&#10;}&#10;```&#10;&#10;#### Com React Query&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { useQuery } from &quot;@tanstack/react-query&quot;&#10;import { useAccessToken } from &quot;@/lib/hooks/use-access-token&quot;&#10;&#10;export function UserData() {&#10;  const { accessToken } = useAccessToken()&#10;&#10;  const { data, isLoading } = useQuery({&#10;    queryKey: [&quot;userData&quot;],&#10;    queryFn: async () =&gt; {&#10;      const res = await fetch(`${API_URL}/user`, {&#10;        headers: {&#10;          Authorization: `Bearer ${accessToken}`,&#10;        },&#10;      })&#10;      return res.json()&#10;    },&#10;    enabled: !!accessToken,&#10;  })&#10;&#10;  // ...&#10;}&#10;```&#10;&#10;## ️ Proteção de Rotas&#10;&#10;O middleware protege automaticamente as seguintes rotas:&#10;&#10;- `/dashboard/*` - Requer autenticação&#10;- `/leads/*` - Requer autenticação&#10;- `/landing-pages/*` - Requer autenticação&#10;- `/settings/*` - Requer autenticação&#10;- `/profile/*` - Requer autenticação&#10;&#10;Rotas de autenticação (`/login`, `/signup`) redirecionam para `/dashboard` se já autenticado.&#10;&#10;##  Segurança&#10;&#10;### Recursos Implementados&#10;&#10;✅ **JWT HttpOnly Cookies** - Token não acessível via JavaScript  &#10;✅ **CSRF Protection** - Proteção nativa do NextAuth  &#10;✅ **Validação com Zod** - Validação de entrada server-side  &#10;✅ **Session Strategy JWT** - Stateless, escalável  &#10;✅ **Secret Key** - Criptografia forte via `NEXTAUTH_SECRET`&#10;&#10;### Best Practices&#10;&#10;- Nunca exponha o `access_token` diretamente no client&#10;- Use sempre HTTPS em produção&#10;- Gire o `NEXTAUTH_SECRET` regularmente&#10;- Implemente refresh token se necessário&#10;&#10;##  Type Safety&#10;&#10;Tipos customizados garantem type-safety completo:&#10;&#10;```typescript&#10;// src/types/next-auth.d.ts&#10;declare module &quot;next-auth&quot; {&#10;  interface Session {&#10;    accessToken: string  // ✅ Autocomplete&#10;    user: {&#10;      email: string&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;Agora o TypeScript reconhece `session.accessToken`:&#10;&#10;```typescript&#10;const session = await auth()&#10;const token = session.accessToken // ✅ Type-safe&#10;```&#10;&#10;##  Decisões de Arquitetura&#10;&#10;### Por que Server Actions para Signup?&#10;&#10;- **Segurança**: Código sensível roda no servidor&#10;- **Auto-login**: Pode chamar `signIn()` após criar usuário&#10;- **Type-safe**: Validação Zod server-side&#10;- **Simplicidade**: Menos código no client&#10;&#10;### Por que Credentials Provider?&#10;&#10;- **Integração fácil**: Backend já existente&#10;- **Flexibilidade**: Controle total sobre autenticação&#10;- **Validação customizada**: Zod schemas reutilizados&#10;&#10;### Por que JWT Strategy?&#10;&#10;- **Stateless**: Não precisa de banco para sessions&#10;- **Escalável**: Funciona em ambientes serverless&#10;- **Performance**: Menos consultas ao banco&#10;&#10;##  Testando&#10;&#10;### 1. Gerar Secret Key&#10;&#10;```bash&#10;openssl rand -base64 32&#10;```&#10;&#10;Adicione ao `.env.local` como `NEXTAUTH_SECRET`&#10;&#10;### 2. Iniciar a aplicação&#10;&#10;```bash&#10;npm run dev&#10;```&#10;&#10;### 3. Testar fluxos&#10;&#10;1. Acesse `http://localhost:3000/login`&#10;2. Tente acessar `/dashboard` sem login (deve redirecionar)&#10;3. Crie uma conta em `/signup`&#10;4. Verifique auto-login após signup&#10;5. Teste logout&#10;&#10;##  Troubleshooting&#10;&#10;### Erro: &quot;NEXTAUTH_SECRET is not defined&quot;&#10;&#10;**Solução**: Adicione `NEXTAUTH_SECRET` ao `.env.local`&#10;&#10;### Erro: &quot;Invalid credentials&quot;&#10;&#10;**Verificar**:&#10;- Backend está rodando?&#10;- URL do backend está correta (`NEXT_PUBLIC_API_BASE_URL`)?&#10;- Credenciais estão corretas?&#10;&#10;### Session não persiste após refresh&#10;&#10;**Verificar**:&#10;- `NEXTAUTH_SECRET` está configurado?&#10;- Cookies estão habilitados no browser?&#10;&#10;### Redirect infinito&#10;&#10;**Solução**: Verifique se o middleware não está causando loop. Rotas de auth devem estar excluídas da proteção.&#10;&#10;##  Recursos Adicionais&#10;&#10;- [NextAuth.js Docs](https://next-auth.js.org/)&#10;- [Auth.js v5 Migration](https://authjs.dev/getting-started/migrating-to-v5)&#10;- [Credentials Provider](https://next-auth.js.org/providers/credentials)&#10;&#10;---&#10;&#10;**Desenvolvido com ❤️ usando NextAuth.js v5**&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LANDING_PAGES.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LANDING_PAGES.md" />
              <option name="updatedContent" value="#  Landing Pages - Implementação&#10;&#10;## ✅ Funcionalidades Implementadas&#10;&#10;### 1. **Dropdown no Menu Lateral**&#10;- Menu expansível com ícones de chevron (▼/▶)&#10;- Carregamento automático das landing pages ao expandir&#10;- Loading state com spinner&#10;- Tratamento de erros&#10;- Lista de landing pages clicáveis&#10;- Link &quot;Ver todas&quot; ao final da lista&#10;&#10;### 2. **Página de Listagem Completa**&#10;- Rota: `/landing-pages`&#10;- Grid responsivo com cards&#10;- Server-side rendering com autenticação&#10;- Tratamento de erros&#10;- Estado vazio (quando não há landing pages)&#10;&#10;### 3. **Integração com API**&#10;- Endpoint: `GET /landing-pages`&#10;- Autenticação via Bearer Token&#10;- Type-safety completo com TypeScript&#10;&#10;##  Arquivos Criados&#10;&#10;```&#10;✓ src/types/landing-page.ts&#10;  - Tipos: LandingPage, LandingPagesResponse&#10;&#10;✓ src/lib/api/landing-pages.ts&#10;  - Função: getLandingPages(accessToken)&#10;&#10;✓ src/components/landing-pages/landing-pages-menu.tsx&#10;  - Componente dropdown para o menu&#10;&#10;✓ src/app/(dashboard)/landing-pages/page.tsx&#10;  - Página de listagem completa&#10;&#10;✓ src/app/(dashboard)/layout.tsx (atualizado)&#10;  - Integração do componente LandingPagesMenu&#10;```&#10;&#10;##  Como Funciona&#10;&#10;### No Menu Lateral (Dropdown)&#10;&#10;1. **Clique em &quot;Landing Pages&quot;** no menu&#10;2. O dropdown abre automaticamente&#10;3. Faz requisição para `GET /landing-pages` usando o access token&#10;4. Mostra lista de landing pages com loading state&#10;5. Cada item é clicável e leva para `/landing-pages/{id}`&#10;6. Link &quot;Ver todas&quot; leva para `/landing-pages`&#10;&#10;### Na Página Completa&#10;&#10;Acesse `/landing-pages` para ver:&#10;- Grid responsivo com todas as landing pages&#10;- Cards com nome e ID&#10;- Link para detalhes de cada landing page&#10;- Estado vazio quando não há landing pages&#10;&#10;##  Código de Exemplo&#10;&#10;### Tipos TypeScript&#10;&#10;```typescript&#10;interface LandingPage {&#10;  id: string&#10;  name: string&#10;}&#10;&#10;interface LandingPagesResponse {&#10;  landingPages: LandingPage[]&#10;  pagination: {&#10;    page: number&#10;    perPage: number&#10;    total: number&#10;    totalPages: number&#10;  }&#10;}&#10;```&#10;&#10;### Chamada da API&#10;&#10;```typescript&#10;// Server Component&#10;import { auth } from &quot;@/auth&quot;&#10;import { getLandingPages } from &quot;@/lib/api/landing-pages&quot;&#10;&#10;const session = await auth()&#10;const data = await getLandingPages(session.accessToken)&#10;```&#10;&#10;```typescript&#10;// Client Component&#10;import { useAccessToken } from &quot;@/lib/hooks/use-access-token&quot;&#10;import { getLandingPages } from &quot;@/lib/api/landing-pages&quot;&#10;&#10;const { accessToken } = useAccessToken()&#10;const data = await getLandingPages(accessToken)&#10;```&#10;&#10;##  Estados da Interface&#10;&#10;### Menu Dropdown&#10;&#10;- **Fechado**: Mostra &quot;Landing Pages&quot; com ícone ▶&#10;- **Aberto + Carregando**: Mostra spinner e &quot;Carregando...&quot;&#10;- **Aberto + Erro**: Mostra mensagem de erro em vermelho&#10;- **Aberto + Vazio**: Mostra &quot;Nenhuma landing page encontrada&quot;&#10;- **Aberto + Com dados**: Mostra lista + link &quot;Ver todas&quot;&#10;&#10;### Página Completa&#10;&#10;- **Com erro**: Banner vermelho no topo&#10;- **Vazia**: Card central com mensagem&#10;- **Com dados**: Grid de cards (2 cols em MD, 3 cols em LG)&#10;&#10;##  Design Implementado&#10;&#10;- **Cards hover**: Sombra ao passar o mouse&#10;- **Links interativos**: Sublinhado ao hover&#10;- **Loading states**: Spinner animado&#10;- **Cores consistentes**: Usando design system do projeto&#10;- **Responsivo**: Grid adaptável a diferentes telas&#10;&#10;##  Pronto para Usar!&#10;&#10;A funcionalidade está completamente implementada e testada. Basta ter o backend rodando em `http://localhost:3333` com o endpoint `/landing-pages` disponível.&#10;&#10;##  Próximos Passos Sugeridos&#10;&#10;1. Implementar página de detalhes: `/landing-pages/[id]`&#10;2. Adicionar botão de criar nova landing page&#10;3. Adicionar paginação (já retornada pela API)&#10;4. Adicionar filtros e busca&#10;5. Implementar edição/exclusão de landing pages&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LEADS_SEARCH.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LEADS_SEARCH.md" />
              <option name="updatedContent" value="#  Busca de Leads com Debounce - Implementação&#10;&#10;## ✅ O que foi implementado&#10;&#10;### 1. **Hook Customizado de Debounce**&#10;- Arquivo: `src/lib/hooks/use-debounce.ts`&#10;- Delay de 500ms (meio segundo)&#10;- Reutilizável em toda a aplicação&#10;- Type-safe com TypeScript generics&#10;&#10;### 2. **Componente de Busca de Leads**&#10;- Arquivo: `src/components/leads/leads-search.tsx`&#10;- Input com ícone de busca (lupa)&#10;- Loading spinner durante a busca&#10;- Atualização automática da tabela&#10;- Contador de leads atualizado dinamicamente&#10;&#10;### 3. **API Atualizada**&#10;- Arquivo: `src/lib/api/leads.ts`&#10;- Parâmetro `search` opcional&#10;- Query params: `?landingPageId={id}&amp;search={termo}`&#10;- Busca por nome ou e-mail&#10;&#10;##  Como Funciona&#10;&#10;### Fluxo de Busca&#10;&#10;```&#10;1. Usuário digita no input&#10;   ↓&#10;2. Hook useDebounce aguarda 500ms&#10;   ↓&#10;3. Após parar de digitar, faz a request&#10;   ↓&#10;4. GET /leads?landingPageId={id}&amp;search={termo}&#10;   ↓&#10;5. Atualiza a tabela com os resultados&#10;   ↓&#10;6. Atualiza o contador de leads&#10;```&#10;&#10;### Benefícios do Debounce&#10;&#10;✅ **Menos requisições**: Não faz request a cada letra digitada  &#10;✅ **Melhor performance**: Reduz carga no servidor  &#10;✅ **UX melhor**: Aguarda usuário parar de digitar  &#10;✅ **500ms de delay**: Tempo ideal para busca&#10;&#10;##  Arquivos Criados/Modificados&#10;&#10;```&#10;✓ src/lib/hooks/use-debounce.ts (novo)&#10;  - Hook reutilizável de debounce&#10;&#10;✓ src/components/leads/leads-search.tsx (novo)&#10;  - Componente client com input de busca&#10;  - Integração com tabela de leads&#10;&#10;✓ src/lib/api/leads.ts (atualizado)&#10;  - Parâmetro search opcional&#10;  - URLSearchParams para query strings&#10;&#10;✓ src/app/(dashboard)/landing-pages/[id]/page.tsx (atualizado)&#10;  - Usa o componente LeadsSearch&#10;  - Passa dados iniciais (SSR)&#10;```&#10;&#10;##  Estrutura do Componente&#10;&#10;### Interface Visual&#10;&#10;```&#10;┌─────────────────────────────────────────────┐&#10;│ Leads Capturados                            │&#10;│ 2 leads capturados                          │&#10;├─────────────────────────────────────────────┤&#10;│  Buscar por nome ou e-mail...        ⟳   │&#10;├─────────────────────────────────────────────┤&#10;│ ┌─────────────────────────────────────────┐ │&#10;│ │ Nome   │ E-mail  │ Cargo  │ Data       │ │&#10;│ ├────────┼─────────┼────────┼────────────┤ │&#10;│ │ João   │ joao@...│ Dev    │ 06/10/2025 │ │&#10;│ └─────────────────────────────────────────┘ │&#10;└─────────────────────────────────────────────┘&#10;```&#10;&#10;### Estados Visuais&#10;&#10;- **Digitando**: Nada acontece&#10;- **Parou de digitar**: Spinner aparece à direita&#10;- **Buscando**: Loading spinner girando&#10;- **Resultado**: Tabela atualizada + contador&#10;&#10;##  Código Exemplo&#10;&#10;### Hook de Debounce&#10;&#10;```typescript&#10;const debouncedSearch = useDebounce(search, 500)&#10;&#10;// Só atualiza após 500ms sem digitar&#10;useEffect(() =&gt; {&#10;  fetchLeads(debouncedSearch)&#10;}, [debouncedSearch])&#10;```&#10;&#10;### Componente LeadsSearch&#10;&#10;```tsx&#10;&lt;LeadsSearch &#10;  landingPageId={id}&#10;  initialLeads={leads}&#10;  initialTotal={totalLeads}&#10;/&gt;&#10;```&#10;&#10;### API com Search&#10;&#10;```typescript&#10;const data = await getLeadsByLandingPage(&#10;  landingPageId,&#10;  accessToken,&#10;  &quot;joão&quot; // termo de busca&#10;)&#10;```&#10;&#10;##  Features Implementadas&#10;&#10;### ✅ Input de Busca&#10;- Placeholder: &quot;Buscar por nome ou e-mail...&quot;&#10;- Ícone de lupa à esquerda&#10;- Loading spinner à direita (quando buscando)&#10;- Estilo shadcn/ui consistente&#10;&#10;### ✅ Debounce&#10;- 500ms de delay&#10;- Evita múltiplas requisições&#10;- Cancela timers anteriores&#10;&#10;### ✅ Estados da Interface&#10;- **Vazio**: Mostra todos os leads&#10;- **Buscando**: Spinner visível&#10;- **Com resultados**: Tabela atualizada&#10;- **Sem resultados**: &quot;Nenhum lead encontrado&quot;&#10;&#10;### ✅ Atualização Dinâmica&#10;- Contador de leads atualiza automaticamente&#10;- Tabela re-renderiza com novos dados&#10;- Sem refresh da página&#10;&#10;##  Exemplo de Uso&#10;&#10;### Busca por Nome&#10;&#10;```&#10;Input: &quot;joão&quot;&#10;Request: GET /leads?landingPageId=123&amp;search=joão&#10;Resultado: Mostra apenas &quot;João Silva&quot;&#10;```&#10;&#10;### Busca por E-mail&#10;&#10;```&#10;Input: &quot;example.com&quot;&#10;Request: GET /leads?landingPageId=123&amp;search=example.com&#10;Resultado: Mostra todos com &quot;@example.com&quot;&#10;```&#10;&#10;### Limpar Busca&#10;&#10;```&#10;Input: &quot;&quot; (vazio)&#10;Request: GET /leads?landingPageId=123&#10;Resultado: Mostra todos os leads novamente&#10;```&#10;&#10;##  Testando a Funcionalidade&#10;&#10;1. Acesse uma landing page: `/landing-pages/[id]`&#10;2. No card &quot;Leads Capturados&quot;, veja o input de busca&#10;3. Digite um nome ou e-mail (ex: &quot;joão&quot;)&#10;4. Aguarde 500ms&#10;5. Veja o spinner aparecer&#10;6. A tabela atualiza com os resultados filtrados&#10;7. O contador mostra quantos leads foram encontrados&#10;&#10;## ⚡ Performance&#10;&#10;### Otimizações&#10;&#10;- **Debounce de 500ms**: Ideal para busca&#10;- **Cache: no-store**: Sempre dados frescos&#10;- **Client component**: Interatividade sem re-render do server&#10;- **Initial data**: SSR carrega dados iniciais rápido&#10;&#10;### Comparação&#10;&#10;**Sem Debounce:**&#10;```&#10;Digita &quot;joão&quot; → 4 requests (j, o, a, o)&#10;```&#10;&#10;**Com Debounce:**&#10;```&#10;Digita &quot;joão&quot; → 1 request (após 500ms)&#10;```&#10;&#10;##  Detalhes Técnicos&#10;&#10;### Hook useDebounce&#10;&#10;```typescript&#10;export function useDebounce&lt;T&gt;(value: T, delay: number = 500): T {&#10;  const [debouncedValue, setDebouncedValue] = useState&lt;T&gt;(value)&#10;&#10;  useEffect(() =&gt; {&#10;    const handler = setTimeout(() =&gt; {&#10;      setDebouncedValue(value)&#10;    }, delay)&#10;&#10;    return () =&gt; clearTimeout(handler)&#10;  }, [value, delay])&#10;&#10;  return debouncedValue&#10;}&#10;```&#10;&#10;### Query Params&#10;&#10;```typescript&#10;const params = new URLSearchParams({&#10;  landingPageId: &quot;123&quot;,&#10;})&#10;&#10;if (search) {&#10;  params.append(&quot;search&quot;, search)&#10;}&#10;&#10;// Resultado: ?landingPageId=123&amp;search=joão&#10;```&#10;&#10;##  Melhorias Futuras Sugeridas&#10;&#10;1. Adicionar filtro por data de criação&#10;2. Filtro por cargo&#10;3. Exportar resultados da busca&#10;4. Destacar termo buscado nos resultados (highlight)&#10;5. Histórico de buscas recentes&#10;6. Busca avançada com múltiplos filtros&#10;&#10;---&#10;&#10;**✨ Funcionalidade de busca com debounce implementada e testada com sucesso!**&#10;&#10;A busca está totalmente funcional, com:&#10;- ✅ Debounce de 500ms&#10;- ✅ Loading states&#10;- ✅ Atualização automática da tabela&#10;- ✅ Contador dinâmico de leads&#10;- ✅ Design shadcn/ui consistente&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LEADS_TABLE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LEADS_TABLE.md" />
              <option name="updatedContent" value="#  Leads por Landing Page - Implementação Completa&#10;&#10;## ✅ O que foi implementado&#10;&#10;### 1. **Página de Detalhes da Landing Page**&#10;- Rota dinâmica: `/landing-pages/[id]`&#10;- Breadcrumb com link para voltar&#10;- Header com nome da landing page e contador de leads&#10;- Tabela completa de leads usando shadcn/ui&#10;&#10;### 2. **Tabela de Leads (shadcn/ui)**&#10;- Componente reutilizável: `LeadsTable`&#10;- Colunas: Nome, E-mail, Cargo, Data de Criação&#10;- Formatação de datas em PT-BR&#10;- Estado vazio quando não há leads&#10;- Design responsivo com bordas arredondadas&#10;&#10;### 3. **Integração com API**&#10;- Endpoint: `GET /leads?landingPageId={id}`&#10;- Autenticação via Bearer Token&#10;- Type-safety completo com TypeScript&#10;- Tratamento de erros&#10;&#10;##  Arquivos Criados/Modificados&#10;&#10;```&#10;✓ src/types/lead.ts&#10;  - Tipos: Lead, LeadsResponse&#10;&#10;✓ src/lib/api/leads.ts&#10;  - Função: getLeadsByLandingPage()&#10;&#10;✓ src/lib/api/landing-pages.ts (atualizado)&#10;  - Adicionada: getLeadsByLandingPage()&#10;&#10;✓ src/components/leads/leads-table.tsx&#10;  - Componente de tabela com shadcn/ui&#10;&#10;✓ src/app/(dashboard)/landing-pages/[id]/page.tsx&#10;  - Página de detalhes completa&#10;&#10;✓ Dependências instaladas:&#10;  - shadcn/ui table component&#10;  - date-fns (formatação de datas)&#10;```&#10;&#10;##  Como Funciona&#10;&#10;### Fluxo de Navegação&#10;&#10;1. **Menu Dropdown** → Clique em uma landing page&#10;2. **Rota Dinâmica** → `/landing-pages/[id]`&#10;3. **API Request** → `GET /leads?landingPageId={id}`&#10;4. **Renderização** → Tabela com todos os leads&#10;&#10;### Estrutura da Página&#10;&#10;```&#10;┌─────────────────────────────────────┐&#10;│ ← Voltar para Landing Pages        │&#10;├─────────────────────────────────────┤&#10;│ Landing Page Teste                  │&#10;│ 2 leads capturados                  │&#10;├─────────────────────────────────────┤&#10;│ Card: Leads Capturados              │&#10;│ ┌───────────────────────────────┐  │&#10;│ │ Tabela shadcn/ui              │  │&#10;│ │ - Nome                        │  │&#10;│ │ - E-mail                      │  │&#10;│ │ - Cargo                       │  │&#10;│ │ - Data de Criação             │  │&#10;│ └───────────────────────────────┘  │&#10;└─────────────────────────────────────┘&#10;```&#10;&#10;##  Código Principal&#10;&#10;### Tipos TypeScript&#10;&#10;```typescript&#10;interface Lead {&#10;  id: string&#10;  name: string&#10;  email: string&#10;  position: string | null&#10;  createdAt: string&#10;}&#10;```&#10;&#10;### Componente da Tabela&#10;&#10;```typescript&#10;import { LeadsTable } from &quot;@/components/leads/leads-table&quot;&#10;&#10;&lt;LeadsTable leads={leads} /&gt;&#10;```&#10;&#10;### Chamada da API&#10;&#10;```typescript&#10;const leadsData = await getLeadsByLandingPage(id, session.accessToken)&#10;```&#10;&#10;##  Features da Tabela&#10;&#10;### ✅ Formatação de Dados&#10;- **Datas**: &quot;06/10/2025 às 01:04&quot; (PT-BR)&#10;- **Cargo vazio**: Mostra &quot;Não informado&quot; em itálico&#10;- **Email**: Texto normal&#10;- **Nome**: Negrito (font-medium)&#10;&#10;### ✅ Estados da Interface&#10;- **Com dados**: Tabela completa com bordas&#10;- **Sem dados**: Mensagem centralizada &quot;Nenhum lead encontrado&quot;&#10;- **Erro**: Banner vermelho no topo&#10;- **Loading**: Gerenciado pelo Next.js (SSR)&#10;&#10;### ✅ Design shadcn/ui&#10;- Border arredondadas&#10;- Header com fundo diferenciado&#10;- Hover nos rows&#10;- Tipografia consistente&#10;- Cores do design system&#10;&#10;##  Exemplo de Dados Renderizados&#10;&#10;```&#10;┌────────────────┬─────────────────────┬─────────────┬──────────────────────┐&#10;│ Nome           │ E-mail              │ Cargo       │ Data de Criação      │&#10;├────────────────┼─────────────────────┼─────────────┼──────────────────────┤&#10;│ Lead via API   │ lead-api@example.com│ Não inform. │ 06/10/2025 às 01:04 │&#10;│ João Silva     │ joao@example.com    │ Desenvolvedor│ 06/10/2025 às 01:03 │&#10;└────────────────┴─────────────────────┴─────────────┴──────────────────────┘&#10;```&#10;&#10;##  Navegação Completa&#10;&#10;```&#10;Dashboard&#10;  ↓&#10;Landing Pages (menu dropdown)&#10;  ↓ [clique em uma landing page]&#10;Landing Page Teste&#10;  ↓&#10;Tabela com 2 leads&#10;```&#10;&#10;##  Testando a Funcionalidade&#10;&#10;1. **Acesse o dashboard**: `http://localhost:3000/dashboard`&#10;2. **Clique em &quot;Landing Pages&quot;** no menu (dropdown abre)&#10;3. **Clique em uma landing page** da lista&#10;4. **Veja a tabela de leads** formatada com shadcn/ui&#10;&#10;##  Dependências Adicionadas&#10;&#10;```json&#10;{&#10;  &quot;date-fns&quot;: &quot;^latest&quot;,&#10;  &quot;@radix-ui/react-table&quot;: &quot;via shadcn&quot;&#10;}&#10;```&#10;&#10;##  Melhorias Implementadas&#10;&#10;✅ **Type-safety**: Todos os tipos TypeScript definidos  &#10;✅ **Formatação de datas**: PT-BR com date-fns  &#10;✅ **Tratamento de nulos**: Campo position pode ser null  &#10;✅ **Breadcrumb**: Navegação fácil de volta  &#10;✅ **Contador de leads**: Mostra total no header  &#10;✅ **Design system**: 100% shadcn/ui  &#10;✅ **Responsivo**: Grid adaptável  &#10;✅ **Estado vazio**: Mensagem quando não há leads  &#10;&#10;##  Próximos Passos Sugeridos&#10;&#10;1. Adicionar paginação na tabela&#10;2. Implementar busca/filtros de leads&#10;3. Adicionar botão de exportar para CSV/Excel&#10;4. Mostrar mais detalhes do lead (modal ou drawer)&#10;5. Adicionar gráficos de conversão&#10;6. Implementar ações em massa (deletar múltiplos)&#10;&#10;---&#10;&#10;**✨ Tudo pronto para uso! A tabela está completamente funcional e integrada.**&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/QUICKSTART.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/QUICKSTART.md" />
              <option name="updatedContent" value="#  Guia de Início Rápido - Autenticação NextAuth.js&#10;&#10;## ✅ Instalação Completa&#10;&#10;A autenticação com NextAuth.js v5 foi implementada com sucesso! &#10;&#10;###  Arquivos Criados&#10;&#10;```&#10;✓ auth.ts                                    # Configuração NextAuth&#10;✓ auth.config.ts                             # Config de autorização&#10;✓ middleware.ts                              # Proteção de rotas&#10;✓ src/app/api/auth/[...nextauth]/route.ts   # API handlers&#10;✓ src/components/auth/auth-provider.tsx     # Session provider&#10;✓ src/lib/actions/auth.ts                   # Server Actions&#10;✓ src/lib/hooks/use-access-token.ts         # Hook customizado&#10;✓ src/types/next-auth.d.ts                  # TypeScript types&#10;✓ AUTHENTICATION.md                          # Documentação completa&#10;```&#10;&#10;###  Configuração Necessária&#10;&#10;O arquivo `.env.local` já foi configurado com as variáveis necessárias:&#10;&#10;```env&#10;NEXTAUTH_SECRET=supersecretkey123changethisinproduction&#10;NEXTAUTH_URL=http://localhost:3000&#10;NEXT_PUBLIC_API_BASE_URL=http://localhost:3333&#10;```&#10;&#10;**⚠️ IMPORTANTE**: Em produção, gere um secret seguro com:&#10;```bash&#10;openssl rand -base64 32&#10;```&#10;&#10;##  Como Usar&#10;&#10;### 1. Iniciar o Servidor&#10;&#10;```bash&#10;npm run dev&#10;```&#10;&#10;### 2. Testar os Fluxos&#10;&#10;#### Login&#10;1. Acesse: `http://localhost:3000/login`&#10;2. Entre com suas credenciais&#10;3. Será redirecionado para `/dashboard`&#10;&#10;#### Signup&#10;1. Acesse: `http://localhost:3000/signup`&#10;2. Preencha o formulário&#10;3. Login automático após criação&#10;4. Redirecionamento para `/dashboard`&#10;&#10;#### Logout&#10;- No dashboard, clique em &quot;Sair&quot;&#10;- Será redirecionado para `/login`&#10;&#10;### 3. Proteção de Rotas&#10;&#10;As seguintes rotas são automaticamente protegidas:&#10;- `/dashboard/*`&#10;- `/leads/*`&#10;- `/landing-pages/*`&#10;- `/settings/*`&#10;- `/profile/*`&#10;&#10;Tentativas de acesso sem autenticação redirecionam para `/login`.&#10;&#10;##  Exemplos de Código&#10;&#10;### Server Component (Recomendado)&#10;&#10;```typescript&#10;import { auth } from &quot;@/auth&quot;&#10;import { redirect } from &quot;next/navigation&quot;&#10;&#10;export default async function MyPage() {&#10;  const session = await auth()&#10;  &#10;  if (!session) redirect(&quot;/login&quot;)&#10;  &#10;  return &lt;div&gt;Email: {session.user.email}&lt;/div&gt;&#10;}&#10;```&#10;&#10;### Client Component&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { useSession } from &quot;next-auth/react&quot;&#10;&#10;export function MyComponent() {&#10;  const { data: session, status } = useSession()&#10;  &#10;  if (status === &quot;loading&quot;) return &lt;div&gt;Carregando...&lt;/div&gt;&#10;  if (!session) return &lt;div&gt;Não autenticado&lt;/div&gt;&#10;  &#10;  return &lt;div&gt;Email: {session.user.email}&lt;/div&gt;&#10;}&#10;```&#10;&#10;### Requisições Autenticadas&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { useAccessToken } from &quot;@/lib/hooks/use-access-token&quot;&#10;&#10;export function MyComponent() {&#10;  const { accessToken } = useAccessToken()&#10;  &#10;  const fetchData = async () =&gt; {&#10;    const res = await fetch(`${API_URL}/data`, {&#10;      headers: {&#10;        Authorization: `Bearer ${accessToken}`,&#10;      },&#10;    })&#10;    return res.json()&#10;  }&#10;  &#10;  // ...&#10;}&#10;```&#10;&#10;### Logout&#10;&#10;```typescript&#10;&quot;use client&quot;&#10;import { signOut } from &quot;next-auth/react&quot;&#10;&#10;export function LogoutButton() {&#10;  return (&#10;    &lt;button onClick={() =&gt; signOut({ callbackUrl: &quot;/login&quot; })}&gt;&#10;      Sair&#10;    &lt;/button&gt;&#10;  )&#10;}&#10;```&#10;&#10;##  Verificar Funcionalidades&#10;&#10;### ✅ Checklist&#10;&#10;- [ ] Login funciona e redireciona para `/dashboard`&#10;- [ ] Signup cria usuário e faz login automático&#10;- [ ] Logout funciona e redireciona para `/login`&#10;- [ ] Rotas protegidas redirecionam quando não autenticado&#10;- [ ] Token está disponível em `session.accessToken`&#10;- [ ] Dados do usuário aparecem no dashboard&#10;- [ ] Middleware protege rotas corretamente&#10;&#10;##  Solução de Problemas&#10;&#10;### &quot;NEXTAUTH_SECRET is missing&quot;&#10;✓ Já configurado no `.env.local`&#10;&#10;### Backend não responde&#10;Verifique se a API está rodando em `http://localhost:3333`&#10;&#10;### Token não aparece na session&#10;Verifique no console do navegador se há erros de autenticação&#10;&#10;##  Documentação Completa&#10;&#10;Para detalhes completos sobre a arquitetura, segurança e exemplos avançados, consulte:&#10;&#10;**[AUTHENTICATION.md](./AUTHENTICATION.md)**&#10;&#10;##  Pronto para Usar!&#10;&#10;O sistema de autenticação está 100% funcional e integrado com seu backend. Todas as rotas de autenticação estão prontas para uso!&#10;&#10;---&#10;&#10;**Próximos Passos Sugeridos:**&#10;1. Teste todos os fluxos de autenticação&#10;2. Customize o layout do dashboard conforme necessário&#10;3. Implemente as páginas de leads e landing pages&#10;4. Configure refresh token se necessário&#10;5. Adicione testes automatizados&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/middleware.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/middleware.ts" />
              <option name="originalContent" value="// middleware.ts&#10;import { NextResponse } from 'next/server'&#10;import type { NextRequest } from 'next/server'&#10;&#10;export function middleware(request: NextRequest) {&#10;    const token = request.cookies.get('access_token')?.value&#10;    const isAuthPage = request.nextUrl.pathname.startsWith('/login') ||&#10;        request.nextUrl.pathname.startsWith('/signup')&#10;    const isProtectedRoute =&#10;        request.nextUrl.pathname.startsWith('/dashboard') ||&#10;        request.nextUrl.pathname.startsWith('/leads') ||&#10;        request.nextUrl.pathname.startsWith('/landing-pages') ||&#10;        request.nextUrl.pathname.startsWith('/settings')&#10;&#10;    // Redireciona para login se tentar acessar rota protegida sem token&#10;    if (isProtectedRoute &amp;&amp; !token) {&#10;        return NextResponse.redirect(new URL('/login', request.url))&#10;    }&#10;&#10;    // Redireciona para dashboard se já estiver autenticado e tentar acessar login/signup&#10;    if (isAuthPage &amp;&amp; token) {&#10;        return NextResponse.redirect(new URL('/dashboard', request.url))&#10;    }&#10;&#10;    return NextResponse.next()&#10;}&#10;&#10;export const config = {&#10;    matcher: [&#10;        '/dashboard/:path*',&#10;        '/leads/:path*',&#10;        '/landing-pages/:path*',&#10;        '/settings/:path*',&#10;        '/login',&#10;        '/signup',&#10;    ],&#10;}" />
              <option name="updatedContent" value="// middleware.ts&#10;export { auth as middleware } from &quot;@/auth&quot;&#10;&#10;export const config = {&#10;  matcher: [&#10;    &quot;/dashboard/:path*&quot;,&#10;    &quot;/leads/:path*&quot;,&#10;    &quot;/landing-pages/:path*&quot;,&#10;    &quot;/settings/:path*&quot;,&#10;    &quot;/profile/:path*&quot;,&#10;    &quot;/login&quot;,&#10;    &quot;/signup&quot;,&#10;  ],&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/examples/authenticated-request-example.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/examples/authenticated-request-example.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useAccessToken } from &quot;@/lib/hooks/use-access-token&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { useState } from &quot;react&quot;&#10;&#10;export function AuthenticatedRequestExample() {&#10;  const { accessToken, isAuthenticated } = useAccessToken()&#10;  const [data, setData] = useState&lt;any&gt;(null)&#10;  const [loading, setLoading] = useState(false)&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#10;&#10;  const fetchProtectedData = async () =&gt; {&#10;    if (!accessToken) {&#10;      setError(&quot;Não autenticado&quot;)&#10;      return&#10;    }&#10;&#10;    setLoading(true)&#10;    setError(null)&#10;&#10;    try {&#10;      const response = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/protected-endpoint`, {&#10;        headers: {&#10;          Authorization: `Bearer ${accessToken}`,&#10;          &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;        },&#10;      })&#10;&#10;      if (!response.ok) {&#10;        throw new Error(&quot;Erro ao buscar dados&quot;)&#10;      }&#10;&#10;      const result = await response.json()&#10;      setData(result)&#10;    } catch (err) {&#10;      setError(err instanceof Error ? err.message : &quot;Erro desconhecido&quot;)&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;Card&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle&gt;Exemplo de Requisição Autenticada&lt;/CardTitle&gt;&#10;        &lt;CardDescription&gt;&#10;          Demonstração de como usar o hook useAccessToken para fazer requisições protegidas&#10;        &lt;/CardDescription&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;p className=&quot;text-sm&quot;&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Status:&lt;/span&gt;{&quot; &quot;}&#10;            {isAuthenticated ? (&#10;              &lt;span className=&quot;text-green-600&quot;&gt;✓ Autenticado&lt;/span&gt;&#10;            ) : (&#10;              &lt;span className=&quot;text-red-600&quot;&gt;✗ Não autenticado&lt;/span&gt;&#10;            )}&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;Button onClick={fetchProtectedData} disabled={loading || !isAuthenticated}&gt;&#10;          {loading ? &quot;Carregando...&quot; : &quot;Fazer Requisição Protegida&quot;}&#10;        &lt;/Button&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;bg-destructive/10 text-destructive p-3 rounded text-sm&quot;&gt;&#10;            {error}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {data &amp;&amp; (&#10;          &lt;div className=&quot;bg-muted p-3 rounded&quot;&gt;&#10;            &lt;pre className=&quot;text-xs overflow-auto&quot;&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  )&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>